package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"CRUD_Project/ent"
	"CRUD_Project/graph/model"
	"context"
	"strconv"
)

// CreateUser is the resolver for the CreateUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUser) (*ent.User, error) {
	user, err := r.Client.User.Create().
		SetName(input.Name).
		SetEmail(input.Email).
		SetAge(int(input.Age)).
		SetPhone(input.Phone).
		Save(ctx)
	if err != nil {
		return nil, err
	}
	return user, nil
}

// UpdateUser is the resolver for the UpdateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input model.UpdateUser) (*ent.User, error) {
	userid, _ := strconv.Atoi(id)
	update := r.Client.User.UpdateOneID(userid)
	if input.Name != nil {
		update = update.SetName(*input.Name)
	}
	if input.Email != nil {
		update = update.SetEmail(*input.Email)
	}
	if input.Age != nil {
		update = update.SetAge(int(*input.Age))
	}
	if input.Phone != nil {
		update = update.SetPhone(*input.Phone)
	}
	return update.Save(ctx)
}

// DeleteUser is the resolver for the DeleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (bool, error) {
	deleteid, _ := strconv.Atoi(id)
	err := r.Client.User.DeleteOneID(deleteid).Exec(ctx)
	return true, err
}

// Users is the resolver for the Users field.
func (r *queryResolver) Users(ctx context.Context) ([]*ent.User, error) {
	return r.Client.User.Query().All(ctx)
}

// UserByID is the resolver for the userById field.
func (r *queryResolver) UserByID(ctx context.Context, id string) (*ent.User, error) {
	findById, _ := strconv.Atoi(id)
	user, _ := r.Client.User.Get(ctx, findById)
	return user, nil
}

// Age is the resolver for the age field.
func (r *userResolver) Age(ctx context.Context, obj *ent.User) (int32, error) {
	return int32(obj.Age), nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
